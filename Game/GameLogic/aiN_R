let start = truelet percent = 0let currentround = 0class Ai {    private aiMoves: boolean[]    private enemyMoves: boolean[]    private strategies: Strategy[]    private currentStratIndex: number    //this function is called to create the AI        constructor() {        this.aiMoves = []        this.enemyMoves = []        this.strategies = []        this.currentStratIndex = 2        this.strategies.push(new Strategy1(this))        this.strategies.push(new Strategy2(this))        this.strategies.push(new Strategy3(this))    }    public getAiMoves(): boolean[] {        return this.aiMoves    }    public getEnemyMoves(): boolean[] {        let moves: boolean[] = []        for (let i = 0; i < this.enemyMoves.length - 1; i++) {            moves.push(this.enemyMoves[i])        }        return moves    }    public registerEnemyMove(enemyMove: boolean): void {        this.enemyMoves.push(enemyMove)    }    public getDecision(): boolean {        let decision = this.strategies[this.currentStratIndex].getNextMove();        this.aiMoves.push(decision);        return decision;    }}class Strategy {    protected parentAi: Ai    constructor(ai: Ai) {        this.parentAi = ai    }    getNextMove(): boolean {        return true;    }}// TitForTatclass Strategy1 extends Strategy {    getNextMove(): boolean {        let enemyMoves = this.parentAi.getEnemyMoves()        return enemyMoves[enemyMoves.length - 1]    }}// Unforgivingclass Strategy2 extends Strategy {    getNextMove(): boolean {        let enemyMoves = this.parentAi.getEnemyMoves();        for (let i = 0; i < enemyMoves.length; i++) {            if (enemyMoves[i]) {                return true            }        }        return false    }}//CHAMPIONclass Strategy3 extends Strategy {    getNextMove(): boolean {        currentround += 1        let enemyMoves = this.parentAi.getEnemyMoves()        if (currentround < 6) {            return false        } else if (currentround < 11) {            return enemyMoves[enemyMoves.length - 1]        } else {            if (start) {                for (let i = 0; i < 11; +1) {                    if (enemyMoves[i]) {                        percent += 1                    }                }                start = false            }            if (enemyMoves[enemyMoves.length - 1] || percent > 5) {                return enemyMoves[enemyMoves.length - 1]            } else {                return true            }        }    }}//TESTINGlet bob = new Ai()bob.registerEnemyMove(false)bob.registerEnemyMove(false)bob.registerEnemyMove(false)bob.registerEnemyMove(false)bob.registerEnemyMove(false)bob.registerEnemyMove(false)let decision = bob.getDecision();basic.showNumber(decision ? 1 : 0);
